syntax = "proto3";

package udf;


//------------------------------------------------------
// RPC Messages for Kapacitor to communicate with
// a child process for data processing.
//
// The Kapacitor processes will send Request messages
// over STDIN to the child process.
// The child process can respond over STDOUT.
//
// Messages are streamed by writing a varint header
// that contains the length of the following message.
// 
// To decode the stream read a varint, then read
// the determined size and decode as a protobuf message.
// There is not footer so the next varint if any begins
// right after the previous message.
//

//------------------------------------------------------
// Management messages
//
// *Request messages are sent to the process from Kapacitor.
// *Response messages are sent to Kapacitor from the process.
//
// While there is an obvious request/response structure for communicating,
// there is a loose coupling between request and response.
// Meaning that ordering or synchronizing STDIN and STDOUT in anyway
// is not necessary.
// For example if Kapacitor requests a state snapshot and the
// process is in the middle of writing a previous response or
// data points those can continue. Eventually Kapacitor will receive
// the state snapshot response and act accordingly.
//
// A KeepAliveRequest/KeepAliveResponse system is used to ensure that 
// the process is responsive. Every time that a KeepAliveRequest is sent
// a KeepAliveResponse must be returned within a timeout. If too many heartbeats
// are missed than the process is considered dead and will be terminated/restarted.


// Request that the process initialize itself with the provided options.
message InitializeRequest {
    repeated Option options = 1;
}
message Option {
    string name = 1;
    oneof value {
        string strValue    = 2;
        int64  intValue    = 3;
        double doubleValue = 4;
    }
}

// Respond to Kapacitor whether initialization was successful.
message InitializeResponse {
    bool   success = 1;
    string error   = 2;
}

// Request that the process provide a snapshot of its state.
message StateRequest {
}

// Respond to Kapacitor with a versioned and serialized
// snapshot of the running state.
message StateResponse {
    int32 version  = 1;
    bytes snapshot = 2;
}

// Request that the process restore its state from a snapshot.
message RestoreRequest {
    int32 version  = 1;
    bytes snapshot = 2;
}

// Respond with success or failure to RestoreRequest
message RestoreResponse {
    int32  version = 1;
    bool   success = 2;
    string error   = 3;
}


// Request that the process respond with a KeepAlive
// to verify it is responding.
message KeepAliveRequest {
    int64 time = 1;
}

// Respond to KeepAliveRequest
message KeepAliveResponse {
    int64 time = 1;
}

// Sent from process to Kapacitor indicating an error has occured.
message ErrorResponse {
    string error = 1;
}

//------------------------------------------------------
// Data flow messages
//
// Sent and received by both the process and Kapacitor


// Indicates the beginning of a batch.
// All subsequent points should be considered
// part of the batch until EndBatch arrives.
message BeginBatch {
}

// Message containing information about a single data point.
// Can be sent on it's own or bookended by BeginBatch and EndBatch messages.
message Point {
    int64              Time            = 1;
    string             Name            = 2;
    string             Database        = 3;
    string             RetentionPolicy = 4;
    string             Group           = 5;
    repeated string    Dimensions      = 6;
    map<string,string> Tags            = 7;
    map<string,double> FieldsDouble    = 8;
    map<string,int64>  FieldsInt       = 9;
    map<string,string> FieldsString    = 10;
}

// Indicates the end of a batch and contains
// all meta data associated with the batch.
message EndBatch {
    string             Name  = 1;
    string             Group = 2;
    int64              TMax  = 3;
    map<string,string> Tags  = 4;
}

//-----------------------------------------------------------
// Wrapper messages
//
// All messages sent over STDIN will be Request messages.
// All messages sent over STDOUT must be Response messages.


// Request message wrapper -- sent from Kapacitor to process
message Request {
    oneof message {
        // Management requests
        InitializeRequest init      = 1;
        KeepAliveRequest  keepalive = 2;
        StateRequest      state     = 3;
        RestoreRequest    restore   = 4;

        // Data flow responses
        BeginBatch begin = 16;
        Point      point = 17;
        EndBatch   end   = 18;
    }
}

// Response message wrapper -- sent from process to Kapacitor
message Response {
    oneof message {
        // Management responses
        KeepAliveResponse keepalive = 1;
        StateResponse     state     = 2;
        RestoreResponse   restore   = 3;
        ErrorResponse     error     = 4;

        // Data flow responses
        BeginBatch begin = 16;
        Point      point = 17;
        EndBatch   end   = 18;
    }
}

